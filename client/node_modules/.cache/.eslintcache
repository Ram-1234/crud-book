[{"/Users/ramnayan/react/crud-book/client/src/index.js":"1","/Users/ramnayan/react/crud-book/client/src/App.js":"2","/Users/ramnayan/react/crud-book/client/src/reportWebVitals.js":"3","/Users/ramnayan/react/crud-book/client/src/components/navbar/index.js":"4","/Users/ramnayan/react/crud-book/client/src/components/card/index.js":"5","/Users/ramnayan/react/crud-book/client/src/components/form/index.js":"6","/Users/ramnayan/react/crud-book/client/src/components/modal/index.js":"7"},{"size":535,"mtime":1698851211814,"results":"8","hashOfConfig":"9"},{"size":2684,"mtime":1698852162141,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1698851222871,"results":"11","hashOfConfig":"9"},{"size":1434,"mtime":1698851064775,"results":"12","hashOfConfig":"9"},{"size":1199,"mtime":1698851064761,"results":"13","hashOfConfig":"9"},{"size":3750,"mtime":1698851064765,"results":"14","hashOfConfig":"9"},{"size":1617,"mtime":1698851064770,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jtv4ym",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ramnayan/react/crud-book/client/src/index.js",[],[],"/Users/ramnayan/react/crud-book/client/src/App.js",[],[],"/Users/ramnayan/react/crud-book/client/src/reportWebVitals.js",[],[],"/Users/ramnayan/react/crud-book/client/src/components/navbar/index.js",[],[],"/Users/ramnayan/react/crud-book/client/src/components/card/index.js",[],[],"/Users/ramnayan/react/crud-book/client/src/components/form/index.js",["38","39","40"],[],"import React, { useState } from 'react';\nimport { useForm} from \"react-hook-form\";\nimport * as yup from \"yup\";\n\n\nconst validationSchema = yup.object().shape({\n    title: yup.string().required('Book title required'),\n    auther: yup.string().required('Book Auther required'),\n    summary: yup.string().required(\"Book Summary required!\"),\n});\n\nfunction Farm(props) {\n  const {title, summary, auther, setUpdateBook, update,_id}=props;\n  const [submited, setSubmitted]= useState(false);\n\n    const {  handleSubmit, formState: { errors }, watch,reset,register,setValue } = useForm({\n      defaultValues:{title:title, auther:auther, summary:summary},\n        validationSchema,\n    });\n  \n    const onChange = ()=>{\n      setSubmitted(false);\n    }\n\n    /** submit book */\n    const onSubmit = async (formData) => {\n        try {\n          console.log('form Data', formData);\n          if(update){\n            const resp = await fetch(\"/updatebook\",{\n              method:\"POST\",\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify( {_id:_id, updateData:formData}),\n            })\n\n            if (resp.ok) {\n              alert('Form data updated successfully');\n              setSubmitted(true)\n                reset(()=>({title:\"\", auther:\"\", summary:\"\"}))\n                setUpdateBook(false);\n            } else {\n              console.error('Error submitting form data');\n              setSubmitted(true)\n            }\n            return \n          }\n\n\n          const response = await fetch(\"/addbook\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify( formData),\n          });\n\n\n\n          if (response.ok) {\n            alert('Form data submitted successfully');\n            setSubmitted(true)\n              reset(()=>({title:\"\", auther:\"\", summary:\"\"}))\n              setUpdateBook(false);\n          } else {\n            console.error('Error submitting form data');\n            setSubmitted(true)\n          }\n        } catch (error) {\n          console.error('Error:', error);\n        }\n      }\n\n    return (\n        <>\n        <div className='container col-6 border border-grey m-auto mt-2'>\n            <h4 className='header mb-3 mt-2'>Book Details</h4>\n            <form onSubmit={handleSubmit(onSubmit)} className='form'>\n                <div className=\"mb-3\">\n                    <label  className=\"form-label\">Book Title</label>\n                        <input type=\"text\" className=\"form-control text-center\" onChange={onChange} id=\"title\" {...register(\"title\")} name=\"title\" aria-describedby=\"booktitleHelp\" required />\n                    {/* <div id=\"booktitleHelp\" className=\"form-text\">We'll never share your email with anyone else.</div> */}\n                </div>\n                <div className=\"mb-3\">\n                    <label className=\"form-label\">Book Auther</label>\n                        <input type=\"text\" {...register('auther')} onChange={onChange} className=\"form-control text-center\" id=\"auther\" name=\"auther\" required />\n                </div>\n                <div className=\"mb-3\">\n                    <label className=\"form-label\">Book Summary</label>\n                        <textarea className=\"form-control\" {...register('summary')} onChange={onChange} id=\"summary\" name=\"summary\" rows=\"4\" cols=\"50\"  required={true} />\n                </div>\n                  {submited && <p style={{font:\"12px\", color:\"green\", margin:\"0\", padding:\"0\"}}>Form Successfuly submitted</p>}\n                <button type=\"submit\" className=\"btn btn-primary mb-2\">Submit</button>\n            </form>\n        </div>\n        </>\n    )\n}\n\nexport default Farm;\n\n","/Users/ramnayan/react/crud-book/client/src/components/modal/index.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":16,"column":41,"nodeType":"43","messageId":"44","endLine":16,"endColumn":47},{"ruleId":"41","severity":1,"message":"45","line":16,"column":51,"nodeType":"43","messageId":"44","endLine":16,"endColumn":56},{"ruleId":"41","severity":1,"message":"46","line":16,"column":72,"nodeType":"43","messageId":"44","endLine":16,"endColumn":80},"no-unused-vars","'errors' is assigned a value but never used.","Identifier","unusedVar","'watch' is assigned a value but never used.","'setValue' is assigned a value but never used."]